/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module two_bit_mux (
  input a,
  input s,
  input b,
  output y
);
  assign y = ((a & ~ s) | (b & s));
endmodule

module four_bit_mux (
  input [3:0] a,
  input [3:0] b,
  input sel,
  output [3:0] y
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  assign s0 = a[3];
  assign s3 = a[2];
  assign s6 = a[1];
  assign s9 = a[0];
  assign s1 = b[3];
  assign s4 = b[2];
  assign s7 = b[1];
  assign s10 = b[0];
  two_bit_mux two_bit_mux_i0 (
    .a( s0 ),
    .s( sel ),
    .b( s1 ),
    .y( s2 )
  );
  two_bit_mux two_bit_mux_i1 (
    .a( s3 ),
    .s( sel ),
    .b( s4 ),
    .y( s5 )
  );
  two_bit_mux two_bit_mux_i2 (
    .a( s6 ),
    .s( sel ),
    .b( s7 ),
    .y( s8 )
  );
  two_bit_mux two_bit_mux_i3 (
    .a( s9 ),
    .s( sel ),
    .b( s10 ),
    .y( s11 )
  );
  assign y[3] = s2;
  assign y[2] = s5;
  assign y[1] = s8;
  assign y[0] = s11;
endmodule

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module four_bit_reg (
  input [3:0] d,
  input enable,
  input reset,
  input clk,
  output [3:0] q
);
  wire [3:0] q_temp;
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  four_bit_mux four_bit_mux_i0 (
    .a( q_temp ),
    .b( d ),
    .sel( enable ),
    .y( s0 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i1 (
    .Set( 1'b0 ),
    .D( s1 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s5 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i2 (
    .Set( 1'b0 ),
    .D( s2 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s6 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( 1'b0 ),
    .D( s3 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s7 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( 1'b0 ),
    .D( s4 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s8 )
  );
  assign q_temp[3] = s5;
  assign q_temp[2] = s6;
  assign q_temp[1] = s7;
  assign q_temp[0] = s8;
  assign s1 = s0[3];
  assign s2 = s0[2];
  assign s3 = s0[1];
  assign s4 = s0[0];
  assign q = q_temp;
endmodule

module two_bit_bus_mux (
  input [1:0] a,
  input [1:0] b,
  input sel,
  output [1:0] y
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  assign s0 = a[1];
  assign s3 = a[0];
  assign s1 = b[1];
  assign s4 = b[0];
  two_bit_mux two_bit_mux_i0 (
    .a( s0 ),
    .s( sel ),
    .b( s1 ),
    .y( s2 )
  );
  two_bit_mux two_bit_mux_i1 (
    .a( s3 ),
    .s( sel ),
    .b( s4 ),
    .y( s5 )
  );
  assign y[1] = s2;
  assign y[0] = s5;
endmodule

module two_bit_reg (
  input [1:0] d,
  input enable,
  input reset,
  input clk,
  output [1:0] q
);
  wire [1:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire [1:0] q_temp;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i0 (
    .Set( 1'b0 ),
    .D( s1 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s3 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i1 (
    .Set( 1'b0 ),
    .D( s2 ),
    .C( clk ),
    .Clr( reset ),
    .Q( s4 )
  );
  two_bit_bus_mux two_bit_bus_mux_i2 (
    .a( q_temp ),
    .b( d ),
    .sel( enable ),
    .y( s0 )
  );
  assign q_temp[1] = s3;
  assign q_temp[0] = s4;
  assign s1 = s0[1];
  assign s2 = s0[0];
  assign q = q_temp;
endmodule
module DIG_ROM_64X14_microcodeROM (
    input [5:0] A,
    input sel,
    output reg [13:0] D
);
    reg [13:0] my_rom [0:28];

    always @ (*) begin
        if (~sel)
            D = 14'hz;
        else if (A > 6'h1c)
            D = 14'h0;
        else
            D = my_rom[A];
    end

    initial begin
        my_rom[0] = 14'h1205;
        my_rom[1] = 14'h234;
        my_rom[2] = 14'h0;
        my_rom[3] = 14'h0;
        my_rom[4] = 14'h1205;
        my_rom[5] = 14'h294;
        my_rom[6] = 14'h0;
        my_rom[7] = 14'h0;
        my_rom[8] = 14'h1205;
        my_rom[9] = 14'h1000;
        my_rom[10] = 14'h0;
        my_rom[11] = 14'h0;
        my_rom[12] = 14'h1205;
        my_rom[13] = 14'h2a4;
        my_rom[14] = 14'h0;
        my_rom[15] = 14'h0;
        my_rom[16] = 14'h1205;
        my_rom[17] = 14'hea4;
        my_rom[18] = 14'h0;
        my_rom[19] = 14'h0;
        my_rom[20] = 14'h1205;
        my_rom[21] = 14'h2b4;
        my_rom[22] = 14'h0;
        my_rom[23] = 14'h0;
        my_rom[24] = 14'h1205;
        my_rom[25] = 14'h8c;
        my_rom[26] = 14'hc8;
        my_rom[27] = 14'h0;
        my_rom[28] = 14'h3fff;
    end
endmodule


module controller (
  input clk,
  input reset,
  input [3:0] data_bus,
  input load_ir,
  output [9:0] control
);
  wire [5:0] s0;
  wire [13:0] rom_out;
  wire [3:0] instr_reg;
  wire [1:0] step_reg;
  wire [1:0] s1;
  // Instruction Reg
  four_bit_reg four_bit_reg_i0 (
    .d( data_bus ),
    .enable( load_ir ),
    .reset( reset ),
    .clk( clk ),
    .q( instr_reg )
  );
  assign s0[5:2] = instr_reg;
  assign s0[1:0] = step_reg;
  // Step Reg
  two_bit_reg two_bit_reg_i1 (
    .d( s1 ),
    .enable( 1'b1 ),
    .reset( reset ),
    .clk( clk ),
    .q( step_reg )
  );
  // microcode ROM
  DIG_ROM_64X14_microcodeROM DIG_ROM_64X14_microcodeROM_i2 (
    .A( s0 ),
    .sel( 1'b1 ),
    .D( rom_out )
  );
  assign control = rom_out[9:0];
  assign s1 = rom_out[13:12];
endmodule
